name: Neko Docker with Google Chrome (Manual Trigger)

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  run-neko-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Generate Random Passwords
      run: |
        NEKO_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 12)
        NEKO_PASSWORD_ADMIN=$(cat /dev/urandom | tr -dc 'A-Za-z0-9' | head -c 16)
        
        # Store passwords securely without printing them
        echo "$NEKO_PASSWORD" > neko_password.txt
        echo "$NEKO_PASSWORD_ADMIN" > neko_admin_password.txt
        
        echo "NEKO_PASSWORD=[HIDDEN]" # Masking output
        echo "NEKO_PASSWORD_ADMIN=[HIDDEN]" # Masking output

    - name: Run m1k1o/neko container
      run: |
        docker run -d \
          --name neko-container \
          --cap-add=SYS_ADMIN \
          --shm-size="2gb" \
          -e NEKO_PASSWORD=$(cat neko_password.txt) \
          -e NEKO_PASSWORD_ADMIN=$(cat neko_admin_password.txt) \
          -v "${GITHUB_WORKSPACE}/policies/chromium/policies.json:/etc/opt/chrome/policies/managed/policies.json" \
          -p 8080:8080 \
          -p 52000-52100:52000-52100/udp \
          m1k1o/neko:google-chrome

    - name: Verify container is running
      run: docker ps

    - name: Install LocalTunnel
      run: npm install -g localtunnel

    - name: Expose container with LocalTunnel
      run: |
        lt --port 8080 > lt-url.txt &
        while [ ! -s lt-url.txt ]; do
          echo "Waiting for LocalTunnel URL..."
          sleep 2
        done
        LT_URL=$(grep -oE 'https://[a-zA-Z0-9.-]+' lt-url.txt)
        echo "$LT_URL" > lt_url.txt

    - name: Run Bore Tunnel in Background
      run: |
        docker run -d --init --rm --network host --name bore-tunnel ekzhang/bore local 8080 --to bore.pub
        sleep 10

    - name: Get Bore Tunnel Logs & Extract URL
      run: |
        BORE_LOGS=$(docker logs bore-tunnel 2>&1 | grep -oE 'bore.pub:[0-9]+')
        echo "$BORE_LOGS" > bore_url.txt

    - name: Get IP Addresses
      run: |
        PRIVATE_IP=$(hostname -I | awk '{print $1}')
        PUBLIC_IP=$(curl -s -4 ifconfig.me)
        
        echo "$PRIVATE_IP" > private_ip.txt
        echo "$PUBLIC_IP" > public_ip.txt

    - name: Store Credentials Securely
      run: |
        echo "🚀 *Neko Chrome is Now Live!*%0A%0A" > credentials.txt
        echo "🔀 *Bore Tunnel URL:*%0A\`$(cat bore_url.txt)\`%0A%0A" >> credentials.txt
        echo "🌍 *LocalTunnel URL:*%0A\`$(cat lt_url.txt)\`%0A%0A" >> credentials.txt
        echo "🌎 *Public IP:*%0A\`$(cat public_ip.txt)\`%0A%0A" >> credentials.txt
        echo "🔹 *Neko Password:* \`$(cat neko_password.txt)\`%0A" >> credentials.txt
        echo "🔹 *Neko Admin Password:* \`$(cat neko_admin_password.txt)\`%0A" >> credentials.txt

    - name: Send Credentials to Telegram Securely
      run: |
        TELEGRAM_BOT_TOKEN="${{ secrets.TELEGRAM_BOT_TOKEN }}"
        TELEGRAM_USER_ID="${{ secrets.TELEGRAM_USER_ID }}"

        # Read credentials from file and send to Telegram
        MESSAGE=$(cat credentials.txt)

        curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d "chat_id=$TELEGRAM_USER_ID" \
        -d "text=$MESSAGE" \
        -d "parse_mode=MarkdownV2" >/dev/null 2>&1

        # Cleanup sensitive files
        rm -f lt-url.txt bore_url.txt private_ip.txt public_ip.txt neko_password.txt neko_admin_password.txt credentials.txt

    - name: Sleep for 6 hours
      run: sleep 21600
